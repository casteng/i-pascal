<compilers>
    <compiler name="FPC" version="2.2.0">
        <directive>
            <id>$A</id>
            <id>$ALIGN</id>
            <desc>data alignment strategy</desc>
            <value>1</value>
            <value>2</value>
            <value>4</value>
            <value>8</value>
            <value>16</value>
            <value>32</value>
        </directive>
        <directive>
            <id>$A1</id>
            <desc>Align to 1 byte</desc>
        </directive>
        <directive>
            <id>$A2</id>
            <desc>Align to 2 bytes</desc>
        </directive>
        <directive>
            <id>$A4</id>
            <desc>Align to 4 bytes</desc>
        </directive>
        <directive>
            <id>$A8</id>
            <desc>Align to 8 bytes</desc>
        </directive>

        <directive>
            <id>$APPTYPE</id>
            <desc>Application type</desc>
            <value>GUI</value>
            <value>CONSOLE</value>
            <value>FS</value>
            <value>TOOL</value>
        </directive>

        <directive>
            <id>$ASMMODE</id>
            <desc>Set assembler mode</desc>
            <value>ATT</value>
            <value>INTEL</value>
            <value>DIRECT</value>
        </directive>

        <directive>
            <id>$BOOLEVAL</id>
            <desc>Complete boolean evaluation</desc>
            <value>ON</value>
            <value>OFF</value>
        </directive>
        <directive>
            <id>$B-</id>
            <id>$B+</id>
            <desc>Complete boolean evaluation</desc>
        </directive>

        <directive>
            <id>$C</id>
            <id>$ASSERTIONS</id>
            <desc>Assertion support</desc>
            <value>ON</value>
            <value>OFF</value>
        </directive>

        <directive>
            <id>$BITPACKING</id>
            <desc>Enable bitsize packing</desc>
            <value>ON</value>
            <value>OFF</value>
        </directive>

        <directive>
            <id>$CHECKPOINTER</id>
            <desc>Check pointer values</desc>
            <value>ON</value>
            <value>OFF</value>
        </directive>

        <directive>
            <id>$CODEALIGN</id>
            <desc>Set the code alignment in bytes</desc>
            <value><![CDATA[<value>]]></value>
            <value>PROC=</value>
            <value>JUMP=</value>
            <value>LOOP=</value>
            <value>CONSTMIN=</value>
            <value>CONSTMAX=</value>
            <value>VARMIN=</value>
            <value>VARMAX=</value>
            <value>LOCALMIN=</value>
            <value>LOCALMAX=</value>
            <value>RECORDMIN=</value>
            <value>RECORDMAX=</value>
        </directive>

        <directive>
            <id>$COPERATORS</id>
            <desc>Allow C like operators</desc>
            <value>ON</value>
            <value>OFF</value>
        </directive>

        <directive>
            <id>$DEFINE</id>
            <desc>Define a symbol</desc>
        </directive>

        <directive>
            <id>$DEFINEC</id>
            <desc>Define a symbol (Mac Pascal compatibility)</desc>
        </directive>

        <directive>
            <id>$ELSE</id>
            <desc>Switch conditional compilation</desc>
        </directive>

        <directive>
            <id>$ELSEC</id>
            <desc>Switch conditional compilation (Mac Pascal compatibility)</desc>
        </directive>

        <directive>
            <id>$ELSEIF</id>
            <desc>Switch conditional compilation</desc>
        </directive>

        <directive>
            <id>$ELIFC</id>
            <desc>Switch conditional compilation (Mac Pascal compatibility)</desc>
        </directive>

        <directive>
            <id>$ENDC</id>
            <desc>End conditional compilation (Mac Pascal compatibility)</desc>
        </directive>

        <directive>
            <id>$ENDIF</id>
            <desc>End conditional compilation</desc>
        </directive>

        <directive>
            <id>$ERROR</id>
            <desc>Generate error message</desc>
            <value></value>
        </directive>
        <directive>
            <id>$ERRORC</id>
            <desc>Generate error message (Mac Pascal compatibility)</desc>
        </directive>

        <directive>
            <id>$ENDREGION</id>
            <desc>End of a collapsible region</desc>
        </directive>

        <directive>
            <id>$F-</id>
            <id>$F+</id>
            <desc>Far or near functions (Turbo Pascal compatibility)</desc>
        </directive>

        <directive>
            <id>$FATAL</id>
            <desc>Generate fatal error message</desc>
            <value></value>
        </directive>

        <directive>
            <id>$FPUTYPE</id>
            <desc>Select coprocessor type</desc>
            <value>SOFT</value>
            <value>X87</value>
            <value>SSE</value>
            <value>SSE2</value>
            <value>SSE64</value>
            <value>STANDARD</value>
            <value>LIBGCC</value>
            <value>FPA</value>
            <value>FPA10</value>
            <value>FPA11</value>
            <value>VFP</value>
        </directive>

        <directive>
            <id>$GOTO</id>
            <desc>Support Goto and Label</desc>
            <value>ON</value>
            <value>OFF</value>
        </directive>

        <directive>
            <id>$H+</id>
            <id>$H-</id>
            <desc>Use AnsiStrings</desc>
        </directive>
        <directive>
            <id>$LONGSTRINGS</id>
            <desc>Use AnsiStrings</desc>
            <value>ON</value>
            <value>OFF</value>
        </directive>

        <directive>
            <id>$HINT</id>
            <value></value>
            <desc>Generate hint message</desc>
        </directive>

        <directive>
            <id>$HINTS</id>
            <desc>Emit hints</desc>
            <value>ON</value>
            <value>OFF</value>
        </directive>

        <directive>
            <id>$IF</id>
            <desc>Start conditional compilation</desc>
            <value></value>
        </directive>

        <directive>
            <id>$IFC</id>
            <desc>Start conditional compilation (Mac Pascal compatibility)</desc>
            <value></value>
        </directive>

        <directive>
            <id>$IFDEF</id>
            <desc>Start conditional compilation</desc>
            <value></value>
        </directive>

        <directive>
            <id>$IFNDEF</id>
            <desc>Start conditional compilation</desc>
            <value></value>
        </directive>

        <directive>
            <id>$IFOPT</id>
            <desc>Start conditional compilation</desc>
            <value></value>
        </directive>

        <directive>
            <id>$IMPLICITEXCEPTIONS</id>
            <desc>Implicit finalization code generation</desc>
            <value>ON</value>
            <value>OFF</value>
        </directive>

        <directive>
            <id>$INFO</id>
            <desc>Generate info message</desc>
            <value></value>
        </directive>

        <directive>
            <id>$INLINE</id>
            <desc>Allow inline code</desc>
            <value>ON</value>
            <value>OFF</value>
        </directive>

        <directive>
            <id>$INTERFACES</id>
            <desc>Specify Interface type</desc>
            <value>COM</value>
            <!--Interfaces will descend from IUnknown and will be reference counted.-->
            <value>CORBA</value>
            <!--Interfaces will not have a parent and are not reference counted (so the programmer is responsible for bookkeeping). Corba interfaces are identified by a simple string so they are assignment compatible with strings and not TGUID.-->
            <value>DEFAULT</value>
            <!--Currently, this is COM.-->
        </directive>

        <directive>
            <id>$IOCHECKS</id>
            <desc>Input/Output checking</desc>
            <value>ON</value>
            <value>OFF</value>
        </directive>
        <directive>
            <id>$I-</id>
            <id>$I+</id>
            <desc>Input/Output checking</desc>
        </directive>

        <directive>
            <id>$IEEEERRORS</id>
            <desc>Enable IEEE error checking for constants</desc>
            <value>ON</value>
            <value>OFF</value>
        </directive>

        <directive>
            <id>$I</id>
            <id>$INCLUDE</id>
            <desc>Include file or compiler info</desc>
            <value>%DATE%</value>
            <!--Inserts the current date.-->
            <!--<value>%FPCTARGET%</value>-->
            <!--Inserts the target CPU name. (deprecated, use FPCTARGETCPU)-->
            <value>%FPCTARGETCPU%</value>
            <!--Inserts the target CPU name.-->
            <value>%FPCTARGETOS%</value>
            <!--Inserts the target OS name.-->
            <value>%FPCVERSION%</value>
            <!--Current compiler version number.-->
            <value>%FILE%</value>
            <!--Filename in which the directive is found.-->
            <value>%LINE%</value>
            <!--Line number on which the directive is found.-->
            <value>%LINENUM%</value>
            <!--Line number on which the directive is found. In this case, the result is an integer, not a string.-->
            <value>%TIME%</value>
            <!--Current time.-->
        </directive>

        <directive>
            <id>$WRITEABLECONST</id>
            <desc>Allow assignments to typed consts</desc>
            <value>ON</value>
            <value>OFF</value>
        </directive>

        <directive>
            <id>$J-</id>
            <id>$J+</id>
            <desc>Allow assignments to typed consts</desc>
        </directive>

        <directive>
            <id>$L</id>
            <id>$LINK</id>
            <desc>Link object file</desc>
            <value></value>
        </directive>

        <directive>
            <id>$LINKFRAMEWORK</id>
            <desc>Link to a framework (DARWIN only)</desc>
            <value></value>
        </directive>

        <directive>
            <id>$LINKLIB</id>
            <desc>Link to a library</desc>
            <value></value>
        </directive>

        <directive>
            <id>$M-</id>
            <id>$M+</id>
            <desc>Generate type info</desc>
        </directive>
        <directive>
            <id>$TYPEINFO</id>
            <desc>Generate type info</desc>
            <value>ON</value>
            <value>OFF</value>
        </directive>

        <directive>
            <id>$MACRO</id>
            <desc>Allow use of macros.</desc>
            <value>ON</value>
            <value>OFF</value>
        </directive>

        <directive>
            <id>$MAXFPUREGISTERS</id>
            <desc>Maximum number of FPU registers for variables</desc>
            <value>0</value>
            <value>1</value>
            <value>2</value>
            <value>3</value>
            <value>4</value>
            <value>5</value>
            <value>6</value>
            <value>7</value>
            <!--where N is the maximum number of FPU registers to use. Currently this can be in the range 0 to 7.-->
            <value>Normal</value>
            <!--restores the heuristic and standard behavior.-->
            <value>Default</value>
            <!--restores the heuristic and standard behaviour.-->
        </directive>

        <directive>
            <id>$MESSAGE</id>
            <desc>Generate info message</desc>
            <value></value>
        </directive>

        <directive>
            <id>$MINENUMSIZE</id>
            <id>$PACKENUM</id>
            <desc>Specify minimum enumeration size</desc>
            <value>0</value>
            <value>1</value>
            <value>2</value>
            <value>4</value>
            <value>NORMAL</value>
            <value>DEFAULT</value>
        </directive>
        <directive>
            <id>$Z</id>
            <desc>Specify minimum enumeration size: OFF - 1, ON - 4</desc>
            <value>ON</value>
            <value>OFF</value>
        </directive>
        <directive>
            <id>$Z1</id>
            <id>$Z2</id>
            <id>$Z4</id>
            <desc>Specify minimum enumeration size</desc>
        </directive>

        <directive>
            <id>$MINFPCONSTPREC</id>
            <desc>Specify floating point constant precision</desc>
            <value>32</value>
            <value>64</value>
            <value>DEFAULT</value>
        </directive>

        <directive>
            <id>$MMX-</id>
            <id>$MMX+</id>
            <desc>Intel MMX support (Intel 80x86 only)</desc>
        </directive>

        <directive>
            <id>$NOTE</id>
            <desc>Generate note message</desc>
            <value></value>
        </directive>

        <directive>
            <id>$NOTES</id>
            <desc>Emit notes</desc>
            <value>ON</value>
            <value>OFF</value>
        </directive>

        <directive>
            <id>$OBJECTCHECKS</id>
            <desc>Check self for nil in methods</desc>
            <value>ON</value>
            <value>OFF</value>
        </directive>

        <directive>
            <id>$OPTIMIZATION</id>
            <desc>Optimization settings, comma-separated</desc>
            <value>ON</value>
            <!--Switches on optimizations, corresponding to level 2 optimizations.-->
            <value>OFF</value>
            <!--Switches of all kinds of optimizations.-->
            <value>DEFAULT</value>
            <!--Returns to default (i.e. command-line or config file) specified optimizations.-->
            <!--Parses the string and switches on the optimizations found in the string as if they were passed using the -Oo command line option. The optimizations must be separated by commas.-->
            <value>REGVAR</value>
            <!--Use register variables.-->
            <value>UNCERTAIN</value>
            <!--Use uncertain optimizations.-->
            <value>SIZE</value>
            <!--Optimize for size.-->
            <value>STACKFRAME</value>
            <!--Skip stackframes.-->
            <value>PEEPHOLE</value>
            <!--Peephole optimizations.-->
            <value>ASMCSE</value>
            <!--Use common subexpression elimination at the assembler level.-->
            <value>LOOPUNROLL</value>
            <!--Unroll loops-->
            <value>TAILREC</value>
            <!--change tail recursion to regular while-->
            <value>ORDERFIELDS</value>
            <!--Reorder fields if this results in better alignment.-->
            <value>FASTMATH</value>
            <!--Fast math operations-->
            <value>REMOVEEMPTYPROCS</value>
            <!--remove calls to empty procedures.-->
            <value>CSE</value>
            <!--Use common subexpression elimination-->
            <value>DFA</value>
            <!--Use DFA (Data Flow Analysis).-->
        </directive>

        <directive>
            <id>$PACKRECORDS</id>
            <desc>Alignment of record elements</desc>
            <value>0</value>
            <value>1</value>
            <value>2</value>
            <value>4</value>
            <value>8</value>
            <value>16</value>
            <value>32</value>
            <value>C</value>
            <!--The special value C is used to specify alignment as by the GNU CC compiler. It should be used only when making import units for C routines.-->
            <value>NORMAL</value>
            <value>DEFAULT</value>
        </directive>

        <directive>
            <id>$PACKSET</id>
            <desc>Specify set size</desc>
            <value>0</value>
            <value>1</value>
            <value>2</value>
            <value>4</value>
            <value>8</value>
            <value>16</value>
            <value>32</value>
            <value>FIXED</value>
            <value>NORMAL</value>
            <value>DEFAULT</value>
        </directive>

        <directive>
            <id>$POP</id>
            <desc>Restore compiler settings</desc>
        </directive>

        <directive>
            <id>$PUSH</id>
            <desc>Save compiler settings</desc>
        </directive>

        <directive>
            <id>$OV-</id>
            <id>$OV+</id>
            <id>$Q-</id>
            <id>$Q+</id>
            <desc>Overflow checking</desc>
        </directive>
        <directive>
            <id>$OVERFLOWCHECKS</id>
            <desc>Overflow checking</desc>
            <value>ON</value>
            <value>OFF</value>
        </directive>

        <directive>
            <id>$R-</id>
            <id>$R+</id>
            <desc>Range checking</desc>
        </directive>
        <directive>
            <id>$RANGECHECKS</id>
            <desc>Range checking</desc>
            <value>ON</value>
            <value>OFF</value>
        </directive>

        <directive>
            <id>$REGION</id>
            <desc>Mark start of collapsible region</desc>
        </directive>

        <directive>
            <id>$R</id>
            <id>$RESOURCE</id>
            <desc>Include resource</desc>
            <value></value>
        </directive>

        <directive>
            <id>$SATURATION+</id>
            <id>$SATURATION-</id>
            <desc>Saturation operations (Intel 80x86 MMX only)</desc>
        </directive>

        <directive>
            <id>$SAFEFPUEXCEPTIONS</id>
            <desc>Wait when storing FPU values on Intel x86</desc>
            <value>ON</value>
            <value>OFF</value>
        </directive>

        <directive>
            <id>$SCOPEDENUMS</id>
            <desc>Control use of scoped enumeration types</desc>
            <value>ON</value>
            <value>OFF</value>
        </directive>

        <directive>
            <id>$SETC</id>
            <desc>Define and assign a value to a symbol (MACPAS only)</desc>
        </directive>

        <directive>
            <id>$STATIC</id>
            <desc>Allow use of Static keyword.</desc>
            <value>ON</value>
            <value>OFF</value>
        </directive>

        <directive>
            <id>$STOP</id>
            <desc>Generate fatal error message</desc>
            <value></value>
        </directive>

        <directive>
            <id>$STRINGCHECKS</id>
            <desc>Ignored</desc>
        </directive>

        <directive>
            <id>$T-</id>
            <id>$T+</id>
            <desc>Typed address operator (@)</desc>
        </directive>
        <directive>
            <id>$TYPEDADDRESS</id>
            <desc>Typed address operator (@)</desc>
            <value>ON</value>
            <value>OFF</value>
        </directive>

        <directive>
            <id>$UNDEF</id>
            <id>$UNDEFC</id>
            <desc>Undefine a symbol</desc>
        </directive>

        <directive>
            <id>$V-</id>
            <id>$V+</id>
            <desc>Var-string checking</desc>
        </directive>
        <directive>
            <id>$VARSTRINGCHECKS</id>
            <desc>Var-string checking</desc>
            <value>ON</value>
            <value>OFF</value>
        </directive>

        <directive>
            <id>$W-</id>
            <id>$W+</id>
            <desc>Generate stackframes</desc>
        </directive>
        <directive>
            <id>$STACKFRAMES</id>
            <desc>Generate stackframes</desc>
            <value>ON</value>
            <value>OFF</value>
        </directive>

        <directive>
            <id>$WAIT</id>
            <desc>Wait for enter key press</desc>
        </directive>

        <directive>
            <id>$WARN</id>
            <desc>Control emission of warnings</desc>
            <value>CONSTRUCTING_ABSTRACT</value>
            <!--Constructing an instance of a class with abstract methods.-->
            <value>IMPLICIT_VARIANTS</value>
            <!--Implicit use of the variants unit.-->
            <value>NO_RETVAL</value>
            <!--Function result is not set.-->
            <value>SYMBOL_DEPRECATED</value>
            <!--Deprecated symbol.-->
            <value>SYMBOL_EXPERIMENTAL</value>
            <!--Experimental symbol-->
            <!--<value>SYMBOL_LIBRARY</value>-->
            <!--Not used.-->
            <value>SYMBOL_PLATFORM</value>
            <!--Platform-dependent symbol.-->
            <value>SYMBOL_UNIMPLEMENTED</value>
            <!--Unimplemented symbol.-->
            <value>UNIT_DEPRECATED</value>
            <!--Deprecated unit.-->
            <value>UNIT_EXPERIMENTAL</value>
            <!--Experimental unit.-->
            <value>UNIT_LIBRARY</value>
            <value>UNIT_PLATFORM</value>
            <!--Platform dependent unit.-->
            <value>UNIT_UNIMPLEMENTED</value>
            <!--Unimplemented unit.-->
            <value>ZERO_NIL_COMPAT</value>
            <!--Converting 0 to NIL-->
            <value>IMPLICIT_STRING_CAST</value>
            <!--Implicit string type conversion-->
            <value>IMPLICIT_STRING_CAST_LOSS</value>
            <!--Implicit string typecast with potential data loss from ”$1” to ”$2”-->
            <value>EXPLICIT_STRING_CAST</value>
            <!--Explicit string type conversion-->
            <value>EXPLICIT_STRING_CAST_LOSS</value>
            <!--Explicit string typecast with potential data loss from ”$1” to ”$2”-->
            <value>CVT_NARROWING_STRING_LOST</value>
            <!--Unicode constant cast with potential data loss-->
        </directive>

        <directive>
            <id>$WARNING</id>
            <desc>Generate warning message</desc>
            <value></value>
        </directive>

        <directive>
            <id>$WARNINGS</id>
            <desc>Emit warnings</desc>
            <value>ON</value>
            <value>OFF</value>
        </directive>

        <!--Global-->

        <directive>
            <id>$APPID</id>
            <desc>Specify application ID for Palm OS</desc>
            <value></value>
        </directive>
        <directive>
            <id>$APPNAME</id>
            <desc>Specify application name for Palm OS</desc>
            <value></value>
        </directive>

        <directive>
            <id>$CALLING</id>
            <desc>Specify calling convention</desc>
            <value>CDECL</value>
            <!--C compiler calling convention.-->
            <value>CPPDECL</value>
            <!--C++ compiler calling convention.-->
            <value>FAR16</value>
            <!--Ignored, but parsed for Turbo Pascal compatibility reasons.-->
            <value>FPCCALL</value>
            <!--Older FPC (1.0.X and before) standard calling convention. If a lot of direct assembler blocks are used, this mode should be used for maximum compatibility.-->
            <value>INLINE</value>
            <!--Use inline code: the code for the function is inserted whenever it is called.-->
            <value>PASCAL</value>
            <!--Pascal calling convention.-->
            <value>REGISTER</value>
            <!--Register calling convention (the default).-->
            <value>SAFECALL</value>
            <!--Safecall calling convention (used in COM): The called procedure/function saves all registers.-->
            <value>STDCALL</value>
            <!--Windows library calling convention.-->
            <value>SOFTFLOAT</value>
            <!--For ARM processors.-->
        </directive>

        <directive>
            <id>$CODEPAGE</id>
            <desc>Codepage which will be used for interpreting literal strings</desc>
            <value>UTF-8</value>
            <value>US-ASCII</value>
            <value>cp1251</value>
            <value>cp1252</value>
            <value>cp866</value>
        </directive>

        <directive>
            <id>$COPYRIGHT</id>
            <desc>Specifies the copyright information that can be viewed on a module for a Netware OS</desc>
            <value></value>
        </directive>

        <directive>
            <id>$D-</id>
            <id>$D+</id>
            <desc>Include GNU debugging information in the executable</desc>
        </directive>
        <directive>
            <id>$DEBUGINFO</id>
            <desc>Include GNU debugging information in the executable</desc>
            <value>ON</value>
            <value>OFF</value>
        </directive>

        <directive>
            <id>$E-</id>
            <id>$E+</id>
            <desc>Emulation of the coprocessor</desc>
        </directive>

        <directive>
            <id>$EXTENSTION</id>
            <desc>Set the extension for the generated binary/library</desc>
            <value>'so'</value>
            <value>'cgi'</value>
            <value>'exe'</value>
            <value>'dll'</value>
        </directive>

        <directive>
            <id>$FRAMEWORKPATH</id>
            <desc>Specify the framework search path on Darwin</desc>
            <value></value>
        </directive>

        <directive>
            <id>$IMAGEBASE</id>
            <desc>Set the base location for a DLL on windows-based systems</desc>
            <value></value>
        </directive>

        <directive>
            <id>$INCLUDEPATH</id>
            <desc>Specify the include path, where the compiler looks for include files</desc>
            <value></value>
        </directive>

        <directive>
            <id>$LIBPREFIX</id>
            <desc>Set the prefix of the library</desc>
            <value></value>
        </directive>

        <directive>
            <id>$LIBRARYPATH</id>
            <desc>Specify the library path, where the linker looks for static or dynamic libraries</desc>
            <value></value>
        </directive>

        <directive>
            <id>$LIBSUFFIX</id>
            <desc>Set the suffix of the library</desc>
            <value></value>
        </directive>

        <directive>
            <id>$MAXSTACKSIZE</id>
            <desc>Set the maximum stack size for an executable on Windows-based systems in bytes</desc>
            <value></value>
        </directive>

        <directive>
            <id>$M</id>
            <id>$MEMORY</id>
            <desc>Set the heap and stacksize</desc>
            <value></value>
        </directive>

        <directive>
            <id>$MINSTACKSIZE</id>
            <desc>Set the minimum stack size for an executable on Windows-based systems in bytes</desc>
            <value></value>
        </directive>

        <directive>
            <id>$MODE</id>
            <desc>Set the compatibility mode of the compiler</desc>
            <value>Default</value>
            <value>Delphi</value>
            <value>DelphiUnicode</value>
            <value>TP</value>
            <value>FPC</value>
            <value>OBJFPC</value>
            <value>MACPAS</value>
        </directive>

        <directive>
            <id>$MODESWITCH</id>
            <desc>Select some compiler features</desc>
            <!--Use object pascal classes.-->
            <value>CLASS</value>
            <!--Automatically include the ObjPas unit.-->
            <value>OBJPAS</value>
            <!--Enable the Result identifier for function results.-->
            <value>RESULT</value>
            <!--Allow automatic conversion of null-terminated strings to strings,-->
            <value>PCHARTOSTRING</value>
            <!--Allow the use of the CVAR keyword.-->
            <value>CVAR</value>
            <!--Allow use of nested comments.-->
            <value>NESTEDCOMMENTS</value>
            <!--Use classical procedural variables.-->
            <value>CLASSICPROCVARS</value>
            <!--Use mac-style procedural variables.-->
            <value>MACPROCVARS</value>
            <!--Implementation and Forward declaration must match completely.-->
            <value>REPEATFORWARD</value>
            <!--Allow silent conversion of pointers to procedural variables.-->
            <value>POINTERTOPROCVAR</value>
            <!--Automatic (silent) dereferencing of typed pointers.-->
            <value>AUTODEREF</value>
            <!--Allow use of Initialization and Finalization-->
            <value>INITFINAL</value>
            <!--Allow use of ansistrings.-->
            <value>ANSISTRINGS</value>
            <!--Allow use of the out parameter type.-->
            <value>OUT</value>
            <!--Allow use of default parameter values.-->
            <value>DEFAULTPARAMETERS</value>
            <!--Support the hint directives (deprecated, platform etc.)-->
            <value>HINTDIRECTIVE</value>
            <!--Allow local variables in class methods to have the same names as properties of the class.-->
            <value>DUPLICATELOCALS</value>
            <!--Allow use of properties.-->
            <value>PROPERTIES</value>
            <!--Allow inline procedures.-->
            <value>ALLOWINLINE</value>
            <!--Allow the use of exceptions.-->
            <value>EXCEPTIONS</value>
            <!--allow the use of advanced records (i.e. records with methods)-->
            <value>ADVANCEDRECORDS</value>
        </directive>

        <directive>
            <id>$O+</id>
            <id>$O-</id>
            <desc>Level 2 optimizations</desc>
        </directive>

        <directive>
            <id>$OBJECTPATH</id>
            <desc>Specify object path</desc>
            <value></value>
        </directive>

        <directive>
            <id>$P-</id>
            <id>$P+</id>
            <desc>Use open strings for short strings parameters</desc>
        </directive>
        <directive>
            <id>$OPENSTRINGS</id>
            <desc>Use open strings for short strings parameters</desc>
            <value>ON</value>
            <value>OFF</value>
        </directive>

        <directive>
            <id>$PASCALMAINNAME</id>
            <desc>Set entry point name</desc>
            <value></value>
        </directive>

        <directive>
            <id>$PIC</id>
            <desc>Generate PIC (Position Independent Code) code</desc>
            <value>ON</value>
            <value>OFF</value>
        </directive>

        <directive>
            <id>$POINTERMATH</id>
            <desc>Allow use of pointer math</desc>
            <value>ON</value>
            <value>OFF</value>
        </directive>

        <directive>
            <id>$PROFILE</id>
            <desc>Generate profiling code</desc>
            <value>ON</value>
            <value>OFF</value>
        </directive>

        <directive>
            <id>$S-</id>
            <id>$S+</id>
            <desc>Generate stack checking code</desc>
        </directive>

        <directive>
            <id>$SCREENNAME</id>
            <desc>Specify screen name for the Netware</desc>
            <value></value>
        </directive>

        <directive>
            <id>$SETPEFLAGS</id>
            <desc>Specify PE Executable flags on windows-based systems</desc>
            <value></value>
        </directive>

        <directive>
            <id>$SMARTLINK</id>
            <desc>Use smartlinking</desc>
            <value>ON</value>
            <value>OFF</value>
        </directive>

        <directive>
            <id>$SYSCALLS</id>
            <desc>Select system calling convention on Amiga/MorphOS</desc>
            <value>LEGACY</value>
            <value>SYSV</value>
            <value>SYSVBASE</value>
            <value>BASESYSV</value>
            <value>R12BASE</value>
        </directive>

        <directive>
            <id>$THREADNAME</id>
            <desc>Set thread name in Netware</desc>
            <value></value>
        </directive>

        <directive>
            <id>$UNITPATH</id>
            <desc>Specify unit path</desc>
            <value></value>
        </directive>

        <directive>
            <id>$VARPROPSETTER</id>
            <desc>Enable use of var/out/const parameters for property setters</desc>
            <value>ON</value>
            <value>OFF</value>
        </directive>

        <directive>
            <id>$VERSION</id>
            <desc>Specify DLL version</desc>
            <value></value>
        </directive>

        <directive>
            <id>$X-</id>
            <id>$X+</id>
            <desc>Extended syntax</desc>
        </directive>
        <directive>
            <id>$EXTENDEDSYNTAX</id>
            <desc>Extended syntax</desc>
            <value>ON</value>
            <value>OFF</value>
        </directive>

        <directive>
            <id>$Y-</id>
            <id>$Y+</id>
            <desc>Insert Browser information</desc>
        </directive>
        <directive>
            <id>$REFERENCEINFO</id>
            <desc>Insert Browser information</desc>
            <value>ON</value>
            <value>OFF</value>
        </directive>

    </compiler>
</compilers>
